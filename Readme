=======================================================
Student Management Application – Implementation Details
=======================================================

Overview:
---------
This project is a full-stack Student Management Application. The backend is built using 
Express, MongoDB (with Mongoose), and Cloudinary (for image uploads), and the frontend 
uses Next.js, Formik, and Tailwind CSS. Key features include:
• CRUD operations for students (with duplicate checks on email, phone, and student ID)
• Image upload with drag-and-drop functionality
• Subjects are stored as an array and displayed as tags
• Clean, modern UI for forms and dashboard

Project Structure:
------------------
Backend:
  /backend
    ├── config
    │      ├── db.js                --> MongoDB connection logic
    │      └── cloudinary.js        --> Cloudinary configuration for image uploads
    ├── controllers
    │      └── studentController.js --> Contains CRUD logic for students
    ├── models
    │      └── Student.js           --> Mongoose model for Student (with fields: 
    │                                   name, email, phone, studentId, address, image, subjects)
    ├── routes
    │      └── studentRoutes.js     --> Express routes with multer (CloudinaryStorage) integration
    └── server.js                  --> Main file that initializes Express, applies middleware, 
                                      connects to MongoDB, and sets up routes

Frontend:
  /frontend (Next.js pages)
    ├── add-student.js           --> Page for adding a new student; uses Formik, Yup, 
    │                                 and includes a drag-and-drop image upload area.
    ├── edit-student.js          --> Page for editing an existing student; pre-fills form 
    │                                 fields, converts subjects array to a comma-separated string, 
    │                                 and uses the same drag-and-drop image upload.
    └── index.js (Dashboard)     --> Displays a list of students in a table with columns for 
                                   profile picture, name, email, phone, student ID, address, 
                                   subjects (as tags), and action buttons (edit, delete). 
                                   Includes a confirmation modal when deleting a student.

Flow of the Application:
------------------------
1. Dashboard (index.js):
   - The Dashboard fetches all students from the backend.
   - Students are displayed in a table with the following columns:
       • Profile: Displays the student's image (or a default if not provided).
       • Name, Email, Phone, Student ID, Address.
       • Subjects: Rendered as individual tags (pill-like UI).
       • Actions: Buttons for editing and deleting a student.
   - When the delete button is clicked, a confirmation modal appears. If confirmed,
     an API call is made to delete the student, and the UI updates accordingly.

2. Add Student (add-student.js):
   - A form built with Formik and validated using Yup.
   - Input fields include name, email, phone, student ID, address, and subjects.
   - Subjects are entered as a comma-separated string and then converted into an array 
     before being sent to the backend.
   - The image upload area uses a drag-and-drop interface:
       • It shows a dashed border with an icon and “Add Image” button.
       • Users can either drag-and-drop an image file or click the area to browse.
       • When an image is selected, a preview thumbnail is displayed.
   - On form submission, the data (including the image file and subjects array) is 
     packaged into a FormData object and sent to the backend. Duplicate checks are 
     performed server-side.

3. Edit Student (edit-student.js):
   - Similar to the Add Student page but pre-fills the form fields with existing data.
   - The subjects array from the backend is converted to a comma-separated string for editing.
   - The same drag-and-drop image upload area is used.
   - On submission, the updated information is sent as FormData to the backend.
   - If a new image is uploaded, the old image is deleted from Cloudinary.

Important Code Snippets:
--------------------------
1. Student Model (models/Student.js):
---------------------------------------
const studentSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  phone: { type: String, required: true, unique: true },
  studentId: { type: String, required: true, unique: true },
  address: { type: String, required: true },
  image: String,
  subjects: [String],
});

2. Drag-and-Drop Image Upload (Frontend snippet):
---------------------------------------------------
<div
  onDragOver={handleDragOver}
  onDragEnter={handleDragEnter}
  onDragLeave={handleDragLeave}
  onDrop={(e) => handleDrop(e, setFieldValue)}
  onClick={handleClick}
  className={`border-2 rounded-lg p-6 flex flex-col items-center justify-center cursor-pointer ${
    isDragging ? 'border-purple-500 bg-purple-50' : 'border-gray-300 border-dashed'
  }`}
>
  {preview ? (
    <img src={preview} alt="Preview" className="mb-2 w-32 h-32 object-cover rounded-lg" />
  ) : (
    <>
      <FontAwesomeIcon icon={faImage} className="text-purple-400 text-3xl mb-2" />
      <p className="text-gray-600">Drag and drop image here, or click add image</p>
    </>
  )}
  <button type="button" className="mt-3 bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-full">
    Add Image
  </button>
</div>
<input type="file" accept="image/*" ref={hiddenFileInputRef} onChange={handleFileChange} className="hidden" />

3. Delete Confirmation Modal (Dashboard snippet):
----------------------------------------------------
{ confirmDelete && (
  <div className="fixed inset-0 z-50 flex items-center justify-center">
    <div className="fixed inset-0 bg-black opacity-50"></div>
    <div className="bg-white rounded-lg p-6 z-10 max-w-sm w-full">
      <h2 className="text-xl font-bold mb-4">Confirm Delete</h2>
      <p className="mb-6">Are you sure you want to delete this student?</p>
      <div className="flex justify-end space-x-4">
        <button onClick={handleCancelDelete} className="px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded">
          Cancel
        </button>
        <button onClick={handleConfirmDelete} className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded">
          Delete
        </button>
      </div>
    </div>
  </div>
)}

Deployment & Testing:
---------------------
• Configure environment variables (MONGO_URI, CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET).
• For the backend, install dependencies and run the server (e.g., using `node server.js`).
• For the frontend, run the Next.js development server (`npm run dev`).
• Use Postman or your browser to test all CRUD operations.
• Verify duplicate validation, drag-and-drop image uploads, and subject tag displays.
• The code is deployed on vercel.

Conclusion:
-----------
This modular implementation divides the code into manageable files for configuration, models, controllers, and routes. The frontend utilizes modern UI components and drag-and-drop features. This structure improves maintainability, scalability, and testability, ensuring a robust Student Management Application.

=======================================================
